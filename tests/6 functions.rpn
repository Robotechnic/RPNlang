simpleFunction -> none fun
	"simpleFunction ok\n" :print
	"ok"
nuf

paramFunction string param -> none fun
	param f"paramFunction ok: {}\n" :print
nuf

returnFunction -> string fun
	"returnFunction\n" :print
	"returnFunction ok\n" return

	"returnFunction failled\n" :print
	1 :exit
nuf

paramReturnFunction string param -> string fun
	param f"paramReturnFunction ok: {}\n" :print
	"paramReturnFunction ok\n" return
	"paramReturnFunction failled\n" :print
	1 :exit
nuf

paramArithmeticFunction float param -> none fun
	a param 1 + =
	param param a - =
	param -1 == :assert
	param f"paramArithmeticFunction ok: {}\n" :print
nuf

conditionFunction bool param -> string fun
	param if
		"conditionFunction true\n" return
	else
		"conditionFunction false\n" return
	fi
	"conditionFunction failled\n" :print
	1 :exit
nuf

conditionFunction1 int a int b -> int fun
	a b f"conditionFunction with params {} and {}\n" :print
	a 0 == if
		"A null\n" :print
		3 return
	else b 0 == if
		"B null\n" :print
		4 return
	else a b == if
		"A equal to B\n" :print
		5 return
	fi fi fi

	"No one equals\n" :print
	8 return
nuf

whileLoopFunction string param int maxSize -> string fun
	final param =
	final :len maxSize <= while
		final :len f"{}\n" :print
		final final param + =
	elihw

	final return
nuf


forLoopFunction int a -> int fun
	sum 0 =
	i 0 a 1 + 1 for
		sum i sum + =
	rof
	sum return
nuf

main -> none fun
	"Test normal function\n" :print
	:simpleFunction
	"test2" :paramFunction
	:returnFunction :print
	"test 4" :paramReturnFunction :print
	12.5 :paramArithmeticFunction

	"Test functions with conditions\n" :print
	true :conditionFunction :print
	false :conditionFunction :print

	3 0 5 :conditionFunction1 == :assert
	4 5 0 :conditionFunction1 == :assert
	5 7 7 :conditionFunction1 == :assert
	8 7 6 :conditionFunction1 == :assert
	8 1 3 :conditionFunction1 == :assert
	
	"Test functions with while loop\n" :print
	test "be" 10 :whileLoopFunction =
	test :len 12 == :assert
	test "bebebebebebe" == :assert
	test f"{}\n" :print
	test "yay" 5 :whileLoopFunction =
	test :len 6 == :assert
	test "yayyay" == :assert
	test f"{}\n" :print

	"Test function with for loop\n" :print
	test 1 :forLoopFunction =
	test 1 == :assert
	test f"forLoopFunction ok: {}\n" :print
	test 10 :forLoopFunction =
	test 55 == :assert
	test f"forLoopFunction ok: {}\n" :print
nuf