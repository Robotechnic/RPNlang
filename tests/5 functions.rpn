fun simpleFuncton -> none:
	"simpleFuncton ok\n" :print
nuf

fun paramFunction string param -> none:
	param f"paramFunction ok: {}\n" :print
nuf

fun returnFunction -> string:
	"returnFunction\n" :print
	"returnFunction ok\n" return

	"returnFunction failled\n" :print
	1 :exit
nuf

fun paramReturnFunction string param -> string:
	param f"paramReturnFunction ok: {}\n" :print
	"paramReturnFunction ok\n" return
	"paramReturnFunction failled\n" :print
	1 :exit
nuf

fun conditionFunction bool param -> string:
	param if
		"conditionFunction true\n" return
	else
		"conditionFunction false\n" return
	fi
nuf

fun conditionFunction1 int a int b -> int:
	a b f"conditionFunction with params {} and {}\n" :print
	a 0 == if
		"A null\n" :print
		3 return
	else b 0 == if
		"B null\n" :print
		4 return
	else a b == if
		"A equal to B\n" :print
		5 return
	fi fi fi

	"No one equals\n" :print
	8 return
nuf

fun whileLoopFunction string param int maxSize -> string:
	final param =
	final :len maxSize <= while
		final :len f"{}\n" :print
		final final param + =
	elihw

	final return
nuf


fun forLoopFunction int a -> none:
	summ 0 =
	i 0 a 1 + 1 for
		summ i summ + =
	rof
	summ f"forLoopFunction ok: {}\n" :print
nuf


lambda fun -> string: "lambda ok\n" return nuf =

# normal function
:simpleFuncton
"test2" :paramFunction
:returnFunction :print
"test 4" :paramReturnFunction :print
:lambda :print


# functions with conditions
true :conditionFunction :print
false :conditionFunction :print

3 0 5 :conditionFunction1 == :assert
4 5 0 :conditionFunction1 == :assert
5 7 7 :conditionFunction1 == :assert
8 7 6 :conditionFunction1 == :assert
8 1 3 :conditionFunction1 == :assert

# functions with while loop
"be" 10 :whileLoopFunction f"{}\n" :print
"yay" 5 :whileLoopFunction f"{}\n" :print

# function with for loop
1 :forLoopFunction
10 :forLoopFunction