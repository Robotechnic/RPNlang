# check hex and decimal values
0b010111101 189 == f"{}\n" :print
0xff727a 16740986 == f"{}\n" :print
0xff 255 <= f"{}\n" :print

# check basic math
3 2 + f"{}\n" :print
8 9 - f"{}\n" :print
4.8 5 + f"{}\n" :print
5 7.5 / f"{}\n" :print
8 3.2 % f"{}\n" :print

# check basic math with variables
a 8 =
b 7.5 =
a b + f"{}\n" :print
a b / f"{}\n" :print

# check variable affectation (for memory leak)
a 2 =
b "bdule" =
a b =
b a =
a b == f"{}\n" :print

# check string concatenation
a "cou" =
a a a + =
a f"{}\n" :print

# check boolean expressions
a 2 =
b 3 =
a b == :not :assert
a b != :assert
a b < :assert
a b > :not :assert
a b <= :assert
a b >= :not :assert

# test random boolean expressions
a b * 7 - 4 == a b + 5 == :and :assert
a b * 7 - 4 == a b + 5 != :and :not :assert
a b * 7 - 4 == a b + 5 == :or :assert
a b * 7 - 4 == a b + 5 != :or :assert

# test ord and chr
a "a" =
a :ord f"{}\n" :print
a :ord 97 == :assert
97 :chr f"{}\n" :print
97 :chr "a" == :assert

# test string length
a "coucou" =
a :len f"{}\n" :print
a :len 6 == :assert

# test to string
12.5 :toString f"{}\n" :print
12.5 :toString "12.5" == :assert
27879 :toString f"{}\n" :print
27879 :toString "27879" == :assert

# test isNumber
"12.5" :isNumber :assert
"a7" :isNumber :not :assert
"12.5a" :isNumber :not :assert

# test toInt
"127" :toInt f"{}\n" :print
"127" :toInt 127 == :assert
"127.5" :toInt f"{}\n" :print
"127.5" :toInt 127 == :assert

# test toFloat
"127" :toFloat f"{}\n" :print
"127" :toFloat 127.0 == :assert
"127.5" :toFloat f"{}\n" :print
"127.5" :toFloat 127.5 == :assert