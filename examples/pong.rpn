"terminal" import
"time" import

Paddle struct
	x -> int
	y -> int
	width -> int
	height -> int
tcurts

Ball struct
	x -> int
	y -> int
	radius -> int
	xSpeed -> float
	ySpeed -> float
tcurts

reboundCoeff -1.001 =

drawPaddle Paddle p -> none fun
	p->x p->y p->width p->height terminal.WHITE_BACKGROUND :terminal.drawRect
nuf

drawBall Ball b -> none fun
	b->x b->y b->radius b->radius terminal.WHITE_BACKGROUND :terminal.drawRect
nuf

drawMidLine int width int height -> none fun
	middle width 2 / =
	i 0 height 1 + 1 for
		middle i "|" terminal.WHITE terminal.DEFAULT_BACKGROUND :terminal.setAscii
	rof
nuf

moveBall Ball b float dt -> none fun
	b->x b->x b->xSpeed dt * + =
	b->y b->y b->ySpeed dt * + =
nuf

paddleCollision Ball b Paddle p -> bool fun
	p->x p->width + b->x > p->y b->y b->radius + < :and p->y p->height + b->y > :and return
nuf


wallCollision Ball b -> bool fun
	b->y 1 < b->y b->radius + :terminal.height 1 - > :or if
		b->ySpeed b->ySpeed -1 * =
		false return
	else b->x b->radius + :terminal.width 1 - > if
		b->xSpeed b->xSpeed -1 * =
		false return
	else b->x 1 < if
		true return
	fi fi fi
	false return
nuf

main -> none fun
	paddleHeight :terminal.height 3 / =
	paddle 5 :terminal.height 2 / paddleHeight 2 / - 5 paddleHeight Paddle =
	ball :terminal.width 2 / :terminal.height 2 / 3 0.01 0.01 Ball =
	quit false =
	:terminal.rawMode
	:terminal.clear
	lastDraw :time.time =
	score 0 =
	quit :not while
		key :terminal.getKey =
		key "a" == if
			quit true =
			continue
		else key "z" == paddle->y 1 > :and if
			paddle->y paddle->y 1 - =
		else key "s" == paddle->y paddle->height + :terminal.height < :and if
			paddle->y paddle->y 1 + =
		fi fi fi
		:time.time lastDraw - 20 < if
			continue
		fi
		:terminal.clear
		paddle->height :terminal.height 3 / =
		ball :time.time lastDraw - :moveBall
		ball paddle :paddleCollision if
			ball->xSpeed ball->xSpeed reboundCoeff * =
			score score 1 + =
		fi
		ball :wallCollision if
			quit true =
		fi
		width :terminal.width =
		height :terminal.height =
		lastDraw :time.time =
		width height :drawMidLine
		paddle :drawPaddle
		ball :drawBall
		5 2 score f"Score: {}" terminal.WHITE terminal.DEFAULT_BACKGROUND :terminal.drawText
		:terminal.flush
	elihw
	:terminal.normalMode
	:terminal.clear
	:terminal.home
	score f"Game Over\nScore : {}\n" :print
nuf